name: Test and release
on:
    workflow_call:
        secrets:
            # required when `sonarCloudEnabled`
            SONAR_TOKEN:
                required: false
            # required when `publishingHelmChartEnabled`
            GH_RW_TOKEN:
                required: false
        inputs:
            goVersion:
                type: string
                default: 1.19
            binaryName:
                type: string
                required: true
            dockerImage:
                type: string
                required: true
            chartsRepoUrl:
                type: string
                default: https://riotkit-org.github.io/helm-of-revolution
            chartOwner:
                type: string
                default: "riotkit-org"
            chartRepository:
                type: string
                default: "helm-of-revolution"
            chartRepoBranch:
                type: string
                default: "gh-pages"
            chartsDir:
                description: "Local directory, where chart is placed"
                type: string
                default: "helm"
            chartImageTagPath:
                description: "Path to the image tag name in values.yaml (dot notation)"
                type: string
                default: ".image.tag"
            sonarCloudEnabled:
                type: boolean
                default: false
            publishingHelmChartEnabled:
                type: boolean
                default: false
            dockerReleasingEnabled:
                type: boolean
                default: true
            testReportEnabled:
                type: boolean
                default: false
            testReportPattern:
                type: string
                default: "junit.xml"
            coverageReportEnabled:
                type: boolean
                default: false
            coverageReportPath:
                type: string
                default: "coverage.out"
            osVariant:
                type: string
                default: "ubuntu-20.04"
jobs:
    build:
        runs-on: ${{ inputs.osVariant }}
        steps:
            - name: Checkout
              uses: actions/checkout@v3
              with:
                  fetch-depth: 0

            - name: Set up Go
              uses: actions/setup-go@v3
              with:
                  go-version: ${{ inputs.goVersion }}

            - name: Build
              run: "make build"

            - name: Test
              run: "make coverage"

            - name: SonarCloud Scan
              uses: sonarsource/sonarcloud-github-action@master
              if: github.ref == 'refs/heads/main' && inputs.sonarCloudEnabled
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
                  SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

            - uses: actions/upload-artifact@v3
              with:
                  name: binary
                  path: .build/${{ inputs.binaryName }}

            - name: Test report
              if: always() && inputs.testReportEnabled
              uses: phoenix-actions/test-reporting@v8
              with:
                  name: Tests
                  path: ${{ inputs.testReportPattern }}
                  reporter: java-junit

            - name: Coverage report
              if: always() && ! contains(github.event.pull_request.user.login, 'dependabot[bot]') && inputs.coverageReportEnabled
              uses: slavcodev/coverage-monitor-action@v1
              with:
                github_token: ${{ secrets.GITHUB_TOKEN }}
                coverage_path: ${{ inputs.coverageReportPath }}
    release-binary:
        runs-on: ${{ inputs.osVariant }}
        needs: ["build"]
        if: github.event_name == 'push' && contains(github.ref, 'refs/tags/')
        steps:
            - uses: actions/download-artifact@v3
              with:
                  name: binary
                  path: .build/

            - name: Release binaries to GitHub releases
              uses: softprops/action-gh-release@v1
              with:
                  files: |
                      .build/${{ inputs.binaryName }}

    release-docker:
        runs-on: ${{ inputs.osVariant }}
        needs: ["build"]
        if: (contains(github.ref, 'refs/tags/') || github.ref == 'refs/heads/main') && inputs.dockerReleasingEnabled
        steps:
            - name: Checkout
              uses: actions/checkout@v2
              with:
                  fetch-depth: 0

            - uses: actions/download-artifact@v3
              with:
                  name: binary
                  path: .build/

            - name: Login to GitHub Container Registry
              uses: docker/login-action@v1
              with:
                  registry: ghcr.io
                  username: ${{ github.actor }}
                  password: ${{ secrets.GITHUB_TOKEN }}

            - name: Create docker tags
              id: meta
              uses: docker/metadata-action@v3
              with:
                  images: ${{ inputs.dockerImage }}

            - name: Build and relase docker
              uses: docker/build-push-action@v2
              with:
                  context: .
                  push: ${{ github.event_name != 'pull_request' }}
                  tags: ${{ steps.meta.outputs.tags }}
                  labels: ${{ steps.meta.outputs.labels }}

    release-chart:
        runs-on: ${{ inputs.osVariant }}
        needs: ["release-docker"]
        if: github.event_name == 'push' && contains(github.ref, 'refs/tags/') && inputs.publishingHelmChartEnabled
        steps:
            - name: Checkout
              uses: actions/checkout@v3
              with:
                  fetch-depth: 0

            - name: Configure Git
              run: |
                  git config user.name "$GITHUB_ACTOR"
                  git config user.email "$GITHUB_ACTOR@users.noreply.github.com"
                  
            - uses: DamianReeves/write-file-action@v1.2
              with:
                  path: set-version.sh
                  contents: |
                      set -e
                      chartsDir=${{ inputs.chartsDir }}
                      version=${{github.ref_name}}
                      dotPath=${{inputs.chartImageTagPath}}
                      
                      for chartName in $(ls ${chartsDir}); do
                          if [ ! -f "${chartsDir}/${chartName}/Chart.yaml" ]; then
                              echo " >> ${chartsDir}/${chartName}/Chart.yaml not present, skipping"
                              continue
                          fi
                          yq e -i ".version = \"${version/v/}\"" "${chartsDir}/${chartName}/Chart.yaml"
                          yq e -i ".appVersion = \"${version}\"" "${chartsDir}/${chartName}/Chart.yaml"
                          yq e -i "${dotPath} = \"${version}\"" "${chartsDir}/${chartName}/values.yaml"
                      done

            - name: Set version
              uses: mikefarah/yq@v4.30.6
              with:
                  cmd: sh set-version.sh

            - name: Publish Helm chart
              uses: stefanprodan/helm-gh-pages@master
              with:
                  token: "${{ secrets.GH_RW_TOKEN }}"
                  charts_dir: ${{ inputs.chartsDir }}
                  charts_url: ${{ inputs.chartsRepoUrl }}
                  owner: ${{ inputs.chartOwner }}
                  repository: ${{ inputs.chartRepository }}
                  branch: ${{ inputs.chartRepoBranch }}
                  target_dir: ./
                  commit_username: "${{ env.GITHUB_ACTOR }}"
                  commit_email: "${{ env.GITHUB_ACTOR }}@users.noreply.github.com"

                  app_version: "${{github.ref_name}}"
                  chart_version: "${{github.ref_name}}"
